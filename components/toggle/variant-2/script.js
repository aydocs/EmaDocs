/**
 * Toggle Component - neo Variant
 * Generated by Emadocs Framework
 */

(function() {
    'use strict';
    
    // Component initialization
    function initToggleNeo() {
        const components = document.querySelectorAll('.ema-toggle--neo');
        
        components.forEach(component => {
            setupEventListeners(component);
            setupAccessibility(component);
            setupAnimations(component);
        });
        
        console.log(`Toggle neo variant initialized: ${components.length} components`);
    }
    
    // Event listeners setup
    function setupEventListeners(component) {
        component.addEventListener('click', handleClick);
        component.addEventListener('keydown', handleKeydown);
        component.addEventListener('mouseenter', handleMouseEnter);
        component.addEventListener('mouseleave', handleMouseLeave);
        component.addEventListener('focus', handleFocus);
        component.addEventListener('blur', handleBlur);
    }
    
    // Accessibility setup
    function setupAccessibility(component) {
        if (!component.getAttribute('role')) {
            component.setAttribute('role', 'button');
        }
        
        if (!component.getAttribute('tabindex')) {
            component.setAttribute('tabindex', '0');
        }
        
        if (!component.getAttribute('aria-label')) {
            component.setAttribute('aria-label', `Toggle component`);
        }
    }
    
    // Animation setup
    function setupAnimations(component) {
        component.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
    }
    
    // Event handlers
    function handleClick(event) {
        if (event.target.getAttribute('data-disabled') === 'true') {
            event.preventDefault();
            return;
        }
        
        console.log(`Toggle neo clicked`);
        
        // Add ripple effect
        addRippleEffect(event.target, event);
        
        // Emit custom event
        event.target.dispatchEvent(new CustomEvent('toggle:click', {
            detail: { variant: 'neo', component: event.target },
            bubbles: true
        }));
    }
    
    function handleKeydown(event) {
        if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            event.target.click();
        }
    }
    
    function handleMouseEnter(event) {
        event.target.classList.add('hover');
    }
    
    function handleMouseLeave(event) {
        event.target.classList.remove('hover');
    }
    
    function handleFocus(event) {
        event.target.classList.add('focused');
    }
    
    function handleBlur(event) {
        event.target.classList.remove('focused');
    }
    
    // Ripple effect
    function addRippleEffect(element, event) {
        const ripple = document.createElement('span');
        ripple.classList.add('ripple');
        
        const rect = element.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = event.clientX - rect.left - size / 2;
        const y = event.clientY - rect.top - size / 2;
        
        ripple.style.cssText = `
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.6);
            transform: scale(0);
            animation: ripple 0.6s linear;
            pointer-events: none;
            width: ${size}px;
            height: ${size}px;
            left: ${x}px;
            top: ${y}px;
        `;
        
        element.style.position = 'relative';
        element.style.overflow = 'hidden';
        element.appendChild(ripple);
        
        setTimeout(() => {
            ripple.remove();
        }, 600);
    }
    
    // Global click handler
    window.handleClick = function() {
        console.log('Toggle neo clicked via global handler');
    };
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initToggleNeo);
    } else {
        initToggleNeo();
    }
    
    // Add ripple animation CSS
    if (!document.querySelector('#ripple-animation')) {
        const style = document.createElement('style');
        style.id = 'ripple-animation';
        style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    }
})();