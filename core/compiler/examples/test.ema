<page title="Emadocs Test Page">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>[[page.title]]</title>
    <link rel="stylesheet" href="css/theme.css" />
    <link rel="stylesheet" href="css/emadocs.css" />
  </head>
  <body>
    <navbar fixed>
      <logo src="/assets/logo.svg" alt="Emadocs Logo" />
      <navlink to="/home">Home</navlink>
      <navlink to="/about">About</navlink>
      <navlink to="/contact">Contact</navlink>
    </navbar>

    <main>
      <section id="hero">
        <text type="h1" align="center" color="primary">Welcome to Emadocs!</text>
        <text type="p" align="center" color="secondary">The future of web development is here.</text>
        <button variant="premium" size="lg" onclick="handleGetStarted()">Get Started</button>
      </section>

      <section id="features">
        <text type="h2" align="center">Features</text>
        <div class="features-grid">
          <Card title="Fast Compilation" content="Compile .ema files in milliseconds" />
          <Card title="Modern Syntax" content="Clean, readable EmadocsLang syntax" />
          <Card title="Type Safety" content="TypeScript-like type system" />
          <Card title="Component System" content="250+ components with 1250 variants" />
        </div>
      </section>

      <section id="demo">
        <text type="h2" align="center">Interactive Demo</text>
        <div class="demo-container">
          <Input type="text" placeholder="Enter your name" value={userName} onchange={userName = event.target.value} />
          <Button variant="neo" onclick={greetUser()}>Greet</Button>
          <Text v-if={userName}>Hello, [[userName]]!</Text>
        </div>
      </section>
    </main>

    <footer>
      <text align="center" color="muted">Â© 2025 Emadocs Framework. All rights reserved.</text>
    </footer>
  </body>
</page>

style section#hero {
  background: linear-gradient(135deg, var(--primary), var(--dark));
  padding: 80px 40px;
  animation: fadeIn 0.8s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 60vh;
  color: white;
}

style section#features {
  padding: 80px 40px;
  background: var(--surface);
}

style section#demo {
  padding: 80px 40px;
  background: var(--surface-light);
}

style .features-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  margin-top: 2rem;
}

style .demo-container {
  max-width: 500px;
  margin: 2rem auto;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

style text[type="h1"] {
  font-size: 3.5rem;
  margin-bottom: 1rem;
  font-weight: 700;
}

style text[type="h2"] {
  font-size: 2.5rem;
  margin-bottom: 2rem;
  font-weight: 600;
}

style text[align="center"] {
  text-align: center;
}

style button[variant="premium"] {
  background: var(--primary);
  color: white;
  padding: 16px 32px;
  border: none;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

style button[variant="premium"]:hover {
  background: var(--primary-dark);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

style button[size="lg"] {
  padding: 20px 40px;
  font-size: 1.2rem;
}

component Navbar {
  prop fixed: boolean = false;
  render {
    <nav class="ema-navbar [[fixed ? 'ema-navbar--fixed' : '']]">
      <div class="ema-navbar__container">
        <div class="ema-navbar__brand">
          <slot name="brand" />
        </div>
        <div class="ema-navbar__nav">
          <slot />
        </div>
      </div>
    </nav>
  }
}

component Logo {
  prop src: string;
  prop alt: string = "Logo";
  render {
    <img src="[[src]]" alt="[[alt]]" class="ema-logo" />
  }
}

component Navlink {
  prop to: string;
  prop active: boolean = false;
  render {
    <a href="[[to]]" class="ema-navlink [[active ? 'ema-navlink--active' : '']]" onclick="Emadocs.navigate('[[to]]')">
      <slot />
    </a>
  }
}

component Section {
  prop id: string;
  prop class: string = "";
  render {
    <section id="[[id]]" class="ema-section [[class]]">
      <slot />
    </section>
  }
}

component Text {
  prop type: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span" = "p";
  prop align: "left" | "center" | "right" = "left";
  prop color: "primary" | "secondary" | "muted" | "success" | "warning" | "error" = "primary";
  prop v-if: boolean = true;
  render {
    <[[type]] v-if={v-if} class="ema-text ema-text--[[align]] ema-text--[[color]]">
      <slot />
    </[[type]]>
  }
}

component Button {
  prop variant: "minimal" | "neo" | "soft" | "glass" | "premium" = "minimal";
  prop size: "sm" | "md" | "lg" = "md";
  prop onclick: Function;
  prop disabled: boolean = false;
  render {
    <button 
      class="ema-button ema-button--[[variant]] ema-button--[[size]] [[disabled ? 'ema-button--disabled' : '']]" 
      onclick={onclick}
      disabled={disabled}
    >
      <slot />
    </button>
  }
}

component Card {
  prop title: string;
  prop content: string;
  prop variant: "minimal" | "neo" | "soft" | "glass" | "premium" = "minimal";
  render {
    <div class="ema-card ema-card--[[variant]]">
      <div class="ema-card__header">
        <h3 class="ema-card__title">[[title]]</h3>
      </div>
      <div class="ema-card__body">
        <p class="ema-card__content">[[content]]</p>
      </div>
    </div>
  }
}

component Input {
  prop type: "text" | "email" | "password" | "number" | "tel" | "url" = "text";
  prop placeholder: string = "";
  prop value: string = "";
  prop onchange: Function;
  prop disabled: boolean = false;
  render {
    <input 
      type="[[type]]" 
      placeholder="[[placeholder]]" 
      value="[[value]]" 
      onchange={onchange}
      disabled={disabled}
      class="ema-input ema-input--neo" 
    />
  }
}

component Footer {
  prop copyright: string;
  render {
    <footer class="ema-footer">
      <div class="ema-footer__container">
        <p class="ema-footer__copyright">[[copyright]]</p>
      </div>
    </footer>
  }
}

event click on button {
  log("Button clicked!");
  // Add ripple effect
  addRippleEffect(event.target);
}

event change on input {
  log("Input changed:", event.target.value);
}

event load on page {
  log("Page loaded successfully!");
  // Initialize framework
  if (window.EmadocsFramework) {
    window.EmadocsFramework.init();
  }
}

state userName: string = "";
state isLoggedIn: boolean = false;
state theme: "light" | "dark" = "light";
state language: string = "en";

api UserAPI {
  baseUrl: "https://api.example.com";
  timeout: 5000;
  methods: ["GET", "POST", "PUT", "DELETE"];
  headers: {
    "Content-Type": "application/json";
    "Authorization": "Bearer [[userToken]]";
  };
}

api AuthAPI {
  baseUrl: "https://auth.example.com";
  timeout: 3000;
  methods: ["POST"];
  endpoints: {
    login: "/login";
    logout: "/logout";
    register: "/register";
    refresh: "/refresh";
  };
}

router {
  route "/" -> "HomePage";
  route "/about" -> "AboutPage";
  route "/contact" -> "ContactPage";
  route "/login" -> "LoginPage";
  route "/dashboard" -> "DashboardPage";
  route "/profile" -> "ProfilePage";
  route "/settings" -> "SettingsPage";
}

layout MainLayout {
  render {
    <div class="main-layout">
      <header>
        <slot name="header" />
      </header>
      <main>
        <slot name="main" />
      </main>
      <footer>
        <slot name="footer" />
      </footer>
    </div>
  }
}

layout AuthLayout {
  render {
    <div class="auth-layout">
      <div class="auth-container">
        <slot name="content" />
      </div>
    </div>
  }
}

animation fadeIn {
  from { 
    opacity: 0; 
    transform: translateY(20px); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0); 
  }
}

animation slideIn {
  from { 
    opacity: 0; 
    transform: translateX(-20px); 
  }
  to { 
    opacity: 1; 
    transform: translateX(0); 
  }
}

animation bounce {
  0% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0); }
}

type User {
  id: number;
  name: string;
  email: string;
  avatar?: string;
  createdAt: Date;
  updatedAt: Date;
}

type ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  errors?: string[];
}

type Theme {
  name: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    surface: string;
    text: string;
  };
}

hook useUser {
  parameters: [userId: string];
  body: {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    
    useEffect(() => {
      const fetchUser = async () => {
        try {
          setLoading(true);
          const response = await UserAPI.get(`/users/${userId}`);
          if (response.success) {
            setUser(response.data);
          } else {
            setError(response.message || 'Failed to fetch user');
          }
        } catch (err) {
          setError('Network error');
        } finally {
          setLoading(false);
        }
      };
      
      fetchUser();
    }, [userId]);
    
    return { user, loading, error };
  }
}

hook useAuth {
  parameters: [];
  body: {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [user, setUser] = useState<User | null>(null);
    const [token, setToken] = useState<string | null>(null);
    
    const login = async (email: string, password: string) => {
      try {
        const response = await AuthAPI.post('/login', { email, password });
        if (response.success) {
          setToken(response.data.token);
          setUser(response.data.user);
          setIsAuthenticated(true);
          localStorage.setItem('token', response.data.token);
        }
        return response;
      } catch (error) {
        throw error;
      }
    };
    
    const logout = () => {
      setToken(null);
      setUser(null);
      setIsAuthenticated(false);
      localStorage.removeItem('token');
    };
    
    return { isAuthenticated, user, token, login, logout };
  }
}

plugin Analytics {
  properties: {
    trackingId: "GA-XXXXXXXXX";
    enabled: true;
    debug: false;
  };
  methods: {
    track: (event: string, data: object) => void;
    page: (url: string) => void;
    identify: (userId: string, traits: object) => void;
  };
}

plugin ErrorTracking {
  properties: {
    dsn: "https://your-dsn@sentry.io/project";
    environment: "production";
    enabled: true;
  };
  methods: {
    captureException: (error: Error) => void;
    captureMessage: (message: string) => void;
    setUser: (user: User) => void;
  };
}

config {
  theme: "purple";
  language: "en";
  debug: false;
  minify: true;
  sourcemap: true;
  treeshaking: true;
  hotReload: true;
  port: 3000;
  host: "localhost";
}

import { Button, Card, Modal, Input, Text } from "./components/ui.ema";
import { useUser, useAuth } from "./hooks/auth.ema";
import { Analytics, ErrorTracking } from "./plugins/index.ema";

export { default as HomePage } from "./pages/HomePage.ema";
export { default as AboutPage } from "./pages/AboutPage.ema";
export { default as ContactPage } from "./pages/ContactPage.ema";
export { default as LoginPage } from "./pages/LoginPage.ema";
export { default as DashboardPage } from "./pages/DashboardPage.ema";

// Global functions
function handleGetStarted() {
  log("Get Started button clicked!");
  notify("Welcome to Emadocs Framework!");
  // Navigate to getting started page
  Emadocs.navigate('/getting-started');
}

function greetUser() {
  if (userName) {
    notify(`Hello, ${userName}! Welcome to Emadocs!`);
  } else {
    alert("Please enter your name first!");
  }
}

function addRippleEffect(element: HTMLElement) {
  const ripple = document.createElement('span');
  ripple.classList.add('ripple');
  element.appendChild(ripple);
  
  setTimeout(() => {
    ripple.remove();
  }, 600);
}
